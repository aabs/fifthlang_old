using fifth.Parser.AST;
using fifth.Parser.AST.Builders;
COMPILER Fifth

	public ProgramBuilder			  programBuilder;
	FunctionBuilder					  funcBuilder;
	ListBuilder<ParameterDeclaration> parameterDeclarationListBuilder;
	ListBuilder<Expr>				  expressionListBuilder;
	ParameterDeclarationBuilder		  parameterDeclarationBuilder;
	FunctionInvocationBuilder		  functionInvocationBuilder;
	ExprBuilder						  exprBuilder;
	SimExprBuilder					  simExprBuilder;
	TermBuilder						  termBuilder;
	bool FollowedByBracket() 
	{   
	Token x = scanner.Peek();  
	return x.kind == _lbracket; 
	}

/*--------------------------------------------------------------------------*/
CHARACTERS
  ucLetter = 'A'..'Z'.
  lcLetter = 'a'..'z'.
  letter = lcLetter + ucLetter.
  digit = "0123456789".
  hexDigit = digit + "ABCDEF".
  cr  = '\r'.
  tab = '\t'.
  lf  = '\n'.
  space = ' '.
  notQuote = ANY - '"' .

TOKENS
  ident  = letter {letter | digit}.
  string = '"' notQuote '"' .
  int = ['+' | '-'] digit {digit} .
  float  = digit {digit} '.' {digit} ['E' ['+'|'-'] digit {digit}].
  use    = "use" .
  semicolon = ';'.
  comma = ','.
  lbracket = '('.
  rbracket = ')'.
  lambda = "=>" .
  plus = '+'.
  minus = '-'.
  times = '*'.
  divide = '/'.

  equ = "==".
  lt = '<'.
  gt = '>'.
  le = "<=".
  ge = ">=".





COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab



PRODUCTIONS
/*------------------------------------------------------------------------*/
AddOp<out AddOperator op>		(.op = AddOperator.Plus;	.)
= 
	( plus						(..)
	| minus						(.op = AddOperator.Minus;	.)
	)
.

MulOp<out MulOperator op>		(.op = MulOperator.Multiply;	.)
= 
	( times						(.	.)
	| divide						(.op = MulOperator.Divide;	.)
	)
.

RelOp<out RelationalOperator op>(.op = RelationalOperator.Equal;	.)
= 
	( equ						(.	.)
	| lt						(.op = RelationalOperator.LessThan;	.)
	| gt						(.op = RelationalOperator.GreaterThan;	.)
	| le						(.op = RelationalOperator.LessThanOrEqual;	.)
	| ge						(.op = RelationalOperator.GreaterThanOrEqual;	.)
	)
.

Expr<out Expr expr>				(. SimExpr left, right; 
									RelationalOperator relop;
									expr = null;
								.)
= SimExpr<out left>				
	[
	RelOp<out relop>
	SimExpr<out right>
	]
.

SimExpr<out SimExpr expr>		(. 
								   Term left, right; 
								   AddOperator addop;
								   expr = null;
								.)
= Term<out left>
{
	AddOp<out addop>
	Term<out right>
}
.

Term<out Term term>				(.
									Factor left, right; 
									MulOperator mulop;
									term = null;
								.)
=
	Factor<out left>
	{
	MulOp<out mulop>
	Factor<out right>
	}
.

Ident<out string name>   
= 
	ident						(. name = t.val; .)
.

Int<out int value>   
= 
	int							(. value = Int32.Parse(t.val); .)
.

String<out string value>   
= 
	string						(. value = t.val; .)
.

Float<out float value>   
= 
	float						(. value = Single.Parse(t.val); .)
.

Factor<out Factor factor>		(.
								string stringValue; 
								int intValue; 
								float floatValue; 
								FunctionInvocationExpression fiexp;
								factor = null;
								Expr e;
								.) 
=
	lbracket 
	Expr<out e>					(..)
	rbracket
	| IF(FollowedByBracket())FunctionInvocation 		(. factor = functionInvocationBuilder.Build(); .)
	| Int<out intValue>			(. factor = new LiteralExpression<int>(intValue); .)
	| Float<out floatValue>		(. factor = new LiteralExpression<float>(floatValue); .)
	| String<out stringValue>	(. factor = new LiteralExpression<string>(stringValue); .)

.

FunctionInvocation				(.  string funcName;
									functionInvocationBuilder = FunctionInvocationBuilder.Start();		.)
=
	Ident<out funcName>			(. functionInvocationBuilder.WithName(funcName); .)
	ArgumentList				(.  .)
.
Arguments						(. Expr expr; .)
=
	Expr<out expr>				(. functionInvocationBuilder.WithArgument(new Argument("", expr)); .)
	{comma Arguments} 
.

ArgumentList					(. .) 
=	
	lbracket 
	Arguments					(. .)
	rbracket 
.


ExpressionList					(. 
								Expr expr;
								expressionListBuilder = ExpressionListBuilder.Start(); 
								.) 
= 
	Expr<out expr>				(. expressionListBuilder.WithItem(expr); .)
	{comma ExpressionList} 
.

ModuleName						(. string modName; .) 
= 
	Ident<out modName>			(. .)
.

TypeImport = use ModuleName semicolon .
TypeImports = TypeImport {TypeImport} .

ParameterDeclaration			(. 
								string typeName, paramName; 
								parameterDeclarationBuilder = ParameterDeclarationBuilder.Start(); 
								.)
= 
	Ident<out typeName>			(. parameterDeclarationBuilder.WithTypeName(typeName); .)		
	Ident<out paramName>		(. parameterDeclarationBuilder.WithName(paramName); .)
.

ParameterDeclarations 
= 
	ParameterDeclaration		(. parameterDeclarationListBuilder.WithItem(parameterDeclarationBuilder.Build()); .)		
	{comma ParameterDeclarations} 
.

ParameterDeclarationList		(. parameterDeclarationListBuilder = ParameterDeclarationListBuilder.Start(); .) 
=	
	lbracket 
	[ParameterDeclarations] 
	rbracket 
.


FunctionName					(. string funcName; .)
= 
	Ident<out funcName>			(. funcBuilder.WithName(funcName);.)
.


FunctionDefinition				(. funcBuilder = FunctionBuilder.Start(); .) 
= 
	FunctionName
	ParameterDeclarationList	(. funcBuilder.WithParameters( parameterDeclarationListBuilder.Build() );.)
	lambda 
	ExpressionList 
	semicolon
.

FunctionDefinitions 
= 
	FunctionDefinition			(. programBuilder.WithFunction(funcBuilder.Build()); .)
	{ FunctionDefinitions } 
.

Fifth							(. programBuilder = ProgramBuilder.Start(); .)
= 
	TypeImports 
	FunctionDefinitions 
.

END Fifth.