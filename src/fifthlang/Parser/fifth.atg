using fifth.Parser.AST;
using fifth.Parser.AST.Builders;
COMPILER Fifth

	public ProgramBuilder astBuilder;
	FunctionBuilder funcBuilder;
	ParameterListBuilder parameterListBuilder;
	ExpressionListBuilder expressionListBuilder;
	ParameterDeclarationBuilder parameterDeclarationBuilder;
	FunctionInvocationBuilder functionInvocationBuilder;

/*--------------------------------------------------------------------------*/
CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789".
  cr  = '\r'.
  tab = '\t'.
  lf  = '\n'.
  space = ' '.

TOKENS
  ident  = letter {letter | digit}.
  use    = "use" .
  string = '"' {letter | space | tab | digit} '"' .
  float  = digit {digit} '.' {digit} ['E' ['+'|'-'] digit {digit}].
  int = ['+' | '-'] digit {digit} .
  endexpr = ';'.
  sepexpr = ','.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab



PRODUCTIONS
/*------------------------------------------------------------------------*/
Ident<out string name>   
= 
	ident						(. name = t.val; .)
.

Int<out int value>   
= 
	int							(. value = Int32.Parse(t.val); .)
.

String<out string value>   
= 
	string						(. value = t.val; .)
.

Float<out float value>   
= 
	float						(. value = Single.Parse(t.val); .)
.

Expression<out Expression expression> (. 
								string stringValue; 
								int intValue; 
								float floatValue; 
								FunctionInvocationExpression fiexp;
								expression = null;
								.) 
=
	  FunctionInvocation 		(. expression = functionInvocationBuilder.Build(); .)
	| Int<out intValue>			(. expression = new LiteralExpression<int>(intValue); .)
	| Float<out floatValue>		(. expression = new LiteralExpression<float>(floatValue); .)
	| String<out stringValue>	(. expression = new LiteralExpression<string>(stringValue); .)
.

FunctionInvocation				(.  string funcName;
									functionInvocationBuilder = FunctionInvocationBuilder.Start();		.)
=
	Ident<out funcName>			(. functionInvocationBuilder.WithName(funcName); .)
	ArgumentList				(.  .)
.
Arguments						(. Expression expression; .)
=
	Expression<out expression>  (. functionInvocationBuilder.WithArgument(new Argument("", expression)); .)
	{sepexpr Arguments} 
.

ArgumentList					(. .) 
=	
	"(" 
	Arguments					(. .)
	")" 
.


ExpressionList					(. 
								Expression expression;
								expressionListBuilder = ExpressionListBuilder.Start(); 
								.) 
= 
	Expression<out expression>  (. expressionListBuilder.WithExpression(expression); .)
	{sepexpr ExpressionList} 
.

ModuleName						(. string modName; .) 
= 
	Ident<out modName>			(. .)
.

TypeImport = "use" ModuleName ';' .
TypeImports = TypeImport {TypeImport} .

ParameterDeclaration			(. 
								string typeName, paramName; 
								parameterDeclarationBuilder = ParameterDeclarationBuilder.Start(); 
								.)
= 
	Ident<out typeName>			(. parameterDeclarationBuilder.WithTypeName(typeName); .)		
	Ident<out paramName>		(. parameterDeclarationBuilder.WithName(paramName); .)
.

ParameterDeclarations 
= 
	ParameterDeclaration		(. parameterListBuilder.WithParameter(parameterDeclarationBuilder.Build()); .)		
	{"," ParameterDeclarations} 
.

ParameterDeclarationList		(. parameterListBuilder = ParameterListBuilder.Start(); .) 
=	
	"(" 
	[ParameterDeclarations] 
	")" 
.


FunctionName					(. string funcName; .)
= 
	Ident<out funcName>			(. funcBuilder.WithName(funcName);.)
.


FunctionDefinition				(. string funcName; funcBuilder = FunctionBuilder.Start(); .) 
= 
	FunctionName
	ParameterDeclarationList	(. funcBuilder.WithParameters( parameterListBuilder.Build() );.)
	"=>" 
	ExpressionList 
	";" 
.

FunctionDefinitions 
= 
	FunctionDefinition			(. astBuilder.WithFunction(funcBuilder.Build()); .)
	{ FunctionDefinitions } .

Fifth							(. astBuilder = ProgramBuilder.Start(); .)
= 
	TypeImports 
	FunctionDefinitions 
.

END Fifth.